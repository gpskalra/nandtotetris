// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {

    static Array memory;
    static Array freeList;

    /** Initializes memory parameters. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let freeList[0] = 16384 - 2048;
        let freeList[1] = null;
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        var Array addr;
        var Array segment;
        if (~(size>0)) {
            do Sys.error(5);
        }
        let segment = freeList;
        while ((~(segment=null))&(segment[0]<(size+3))) {
            let segment = segment[1];
        }
        if (segment = null) {
            do Sys.error(6);
            return 0;
        }
        let addr = (segment + segment[0]) - size;
        let addr[-1] = size + 1;
        let segment[0] = segment[0] - (size + 1);
        return addr; 
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        var int size;
        let size = object[-1];
        let object[0] = freeList;
        let freeList = object - 1;
        return;
    }    
}
