// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    
    // Load to RAM or Screen based on address MSB
    DMux(in=load,a=load1,b=load2,sel=address[14]);

    RAM16K(address=address[0..13],load=load1,in=in,out=out1);
    Screen(address=address[0..12],load=load2,in=in,out=out2);
    Keyboard(out=out3);

    // Select Screen or Keyboard output based on address second significant bit
    Mux16(a=out2,b=out3,sel=address[13],out=out4);

    // Select RAM or previous output based on address MSB
    Mux16(a=out1,b=out4,sel=address[14],out=out);
}
